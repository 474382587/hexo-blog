[{"title":"MySQL Basics","date":"2018-10-03T05:40:34.000Z","path":"2018/10/02/MYSQL basic/","text":"MySQL Basics Config file –&gt; my.cnf Login –&gt; 1. command line mysql -uroot -p then enter password 2. mysql -uroot -ppassword Logout –&gt; 1. exit quit \\q Login mysql -h&quot;host_address&quot; -uroot -p -P3306 –&gt; add host and port number login and open a DB mysql -uroot -p -D db_name Common SQL SELECT USER(); –&gt; Login User Info SELECT VERSION(); –&gt;MYSQL Version SELECT NOW(); –&gt; Get current date time SELECT DATABASE(); –&gt; Get current Database Create database CREATE DATABASE db_name; CREATE SCHEMA db_name; CREATE DATABASE IF NOT EXISTS db_name; CREATE DATABASE IF NOT EXISTS db_name DEFAULT CHARACTER SET &#39;UTF8&#39;; Show all databasesSHOW DATABASES;SHOW SCHEMAS; CommonSHOW WARNINGSSHOW CREATE DATABSE db_name;Modify DATABASE ALTER DATABSE db_name DEFAULT CHARACTER SET=charset;Open sepcific db: USE db_name;Select current db –&gt; SELECT DATABASE();Delete a db –&gt; DROP DATABSE db_name; –&gt; DROP DATABSE db_name IF EXISTS; TABLES Includes ROW and COLUMNAt least has one COLUMN, ROW can be 0Has to be unique Type: Number Integer TINYINT SMALLINT MEDIUMINT INT BIGINT BOOL,BOOLEAN Float FLOAT DOUBLE DECIMAL String CHAR VARCHAR TINYTEXT TEXT MEDIUMTEXT LONGTEXT ENUM(‘value1’, ‘value2’, …) SET(‘value1’, ‘value2’, …) Date TIME DATE DATETIME TIMESTAMP YEAR Create table: 1234CREATE TABLE IF NOT EXISTS table_name( name type conditions username )ENGINE=\"\" CHARSET=\"\";","tags":[{"name":"MySQL","slug":"MySQL","permalink":"http://josephjin.site/blog/tags/MySQL/"}]},{"title":"PHP SQL","date":"2018-10-01T17:59:07.000Z","path":"2018/10/01/PHP SQL/","text":"PHP Manipulate MySQLThere are 3 ways to do this: MySQL: Not permanent connection, not optimized, abandoned after PHP5.5 MySQLi: Permanent connection, only support MySQL PDO: Similar as MySQLi, support most of the database use phpinfo() to see if your server support these WAMP –&gt; support all 3 by defaultModify settings in php.ini MySQL1234567891011121314151617181920212223242526272829303132333435363738394041// 1. connect server/DBmysql_connect($server, $usertname, $password) or die('Error: DB connection failed.');// 2. select DBmysql_select_db($database_name) or die('Error: Database do not exist.');// 3. set charset encodingmysql_set_charset($charset);// 4. close connectionmysql_close($link) // $link = mysql_connect(...)// die('Error: DB connection failed');// Execute SQL statementmysql_query($query); // Return Boolean value to indicate success/fail// ADDmysql_query(\"INSERT INTO users VALUES(NULL, 'NAME', 123)\");// UPDATEmysql_query(\"UPDATE users SET money=25 where id=3\");// DELETEmysql_query(\"DELETE FROM users where id=3\");// DROPmysql_query(\"DROP TABLE test\");// SELECT$result mysql_query(\"SELECT * FROM test\");mysql_fetch_row($result); // return an index arraymysql_fetch_assoc($result); // return an associate arraymysql_fetch_array($result); // return a mixed arraywhile($line = mysql_fetch_array($result)) &#123; $data[] = $line;&#125;var_dump($data); MySQLi12345678// connect database$connect = mysqli_connect('host', 'username', 'password', 'database');// perform sql query$result = mysqli_query($connect, $sql);// get resultsmysqli_fetch_all($result);","tags":[{"name":"PHP","slug":"PHP","permalink":"http://josephjin.site/blog/tags/PHP/"}]},{"title":"PHP File Related","date":"2018-09-30T17:59:07.000Z","path":"2018/09/30/PHP File Related/","text":"File Related Functions 12345678910111213141516171819202122232425// this is a helper function to create file&lt;?php /** * Create file * @method createFile * @param string $fileName * @return boolean true | false */ function createFile(string $fileName) &#123; // check if file exist if(file_exists($fileName)) &#123; return false; &#125; if(file_exsists(dirname($fileName))) &#123; // create directory/ multiple level mkdir(dirname($fileName), 0777, true); &#125; if(touch($fileName)) &#123; return true; &#125; else &#123; return false; &#125; &#125;?&gt; 123456789101112131415161718192021// this is a helper function to delete file&lt;?php /** * Delete file * @method deleteFile * @param string $fileName * @return boolean true | false */ function deleteFile(string $fileName) &#123; // check if file exist and have access to delete if(!file_exists($fileName) || !is_writeable($fileName)) &#123; return false; &#125; if(unlink($fileName)) &#123; return true; &#125; else &#123; return false; &#125; &#125;?&gt; 12345678910111213141516171819202122232425// this is a helper function to copy file&lt;?php /** * Copy file * @method copyFile * @param string $fileName string $dest * @return boolean true | false */ function copyFile(string $fileName, string $dest) &#123; // check if destination is a directory, if not, create one if(!is_dir($dest)) &#123; mkdir($dest, 0777, true); &#125; $destName = $dest.DIRECTORY_SEPARATOR.basename($fileName); if(file_exisits($destName)) &#123; return false; &#125; if(copy($fileName, $destName)) &#123; return true; &#125; else &#123; return false; &#125; &#125;?&gt; 1234567891011121314151617181920212223242526// this is a helper function to rename file&lt;?php /** * Rename file * @method renameFile * @param string $fileName string $newName * @return boolean true | false */ function copyFile(string $fileName, string $newName) &#123; // check if file exist if(!if_file($fileName)) &#123; return false; &#125; $path = dirname($fileName); $destName = $path.DIRECTORY.SEPARATOR.$newName; if(is_file($destName)) &#123; return false; &#125; if(rename($fileName, $newName)) &#123; return true; &#125; else &#123; return false; &#125; &#125;?&gt; 12345678910111213141516171819202122232425262728// this is a helper function to cut file&lt;?php /** * Cut file * @method cutFile * @param string $fileName string $dest * @return boolean true | false */ function cutFile(string $fileName, string $dest) &#123; // check if file exist if(!if_file($fileName)) &#123; return false; &#125; if(!is_dir($dest)) &#123; mkdir($dest, 0777, true); &#125; $destName = $dest.DIRECTORY.SEPERATOR.basename($fileName); if(is_file($destName)) &#123; return false; &#125; if(rename($fileName, $destName)) &#123; return true; &#125; else &#123; return false; &#125; &#125;?&gt; 12345678910111213141516171819&lt;?php /** * @method getFileInfo * @param String $fileName * @return Array contains info of the file */ function getFileInfo(string $fileName) &#123; if(!is_file($fileName) || !is_readable($fileName)) &#123; return false; &#125; return [ 'atime' =&gt; date(\"Y-m-d H:i:s\", fileatime($fileName)), 'mtime' =&gt; date(\"Y-m-d H:i:s\", filemtime($fileName)), 'ctime' =&gt; date(\"Y-m-d H:i:s\", filectime($fileName)), 'size' =&gt; filesize($fileName), 'type' =&gt; filetype($fileName) ] &#125;?&gt; 1234567891011121314151617181920212223242526272829&lt;?php /** * Convert Bit to Byte * @method ConvertToByte * @param String $byte string $precision, default as 2 digits * @return int byte */ function ConvertToByte(int $byte, int $precision = 2) &#123; $kb = 1024; $mb = 1024 * $kb; $gb = 1024 * $mb; $tb = 1024 * $gb; if($byte &lt; $kb) &#123; return $byte.'B'; &#125; else if ($byte &lt; $mb) &#123; return round($byte / $kb, $precision).'$KB'; &#125; else if ($byte &lt; $gb) &#123; return round($byte / $mb, $precision).'$MB'; &#125; else if ($byte &lt; $tb) &#123; return round($byte / $gb, $precision).'GB'; &#125; else &#123; return round($byte / $tb, $precision).'TB'; &#125; &#125;?&gt; 12345678910111213&lt;?php /** * read content from file * @method readFile * @param string $fileName * @return file content */ function readFile(string $fileName) &#123; if(is_file($fileName) &amp;&amp; is_readable($fileName)) &#123; return file_get_contents($fileName); &#125; &#125;?&gt; 123456789101112131415161718&lt;?php /** * read content from file * @method readFile * @param string $fileName * @return file content */ function readFileArray(string $fileName, bool $skipEmptyLines = false) &#123; if(is_file($fileName) &amp;&amp; is_readable($fileName)) &#123; if($skipEmptyLines) &#123; return file($fileName, FILE_IGNORE_NEW_LINES|FILE_SKIP_EMPTY_LINES); &#125; else &#123; return file($fileName) &#125; &#125; &#125;?&gt; 1234567891011121314151617181920212223&lt;?php /** * Write content to file * @method writeFile * @param string $fileName, $data * @return file content */ function writeFile(string $fileName, $data) &#123; $dirName = dirname($fileName); if(!file_exists($dirName)) &#123; mkdir($dirName, 0777, true); &#125; if(is_array($data) || is_object($data)) &#123; $data = serialize($data); &#125; if(file_put_contents($fileName, $data) !== false) &#123; return true; &#125; else &#123; return false; &#125; &#125;?&gt; 1234567891011121314151617181920212223242526272829&lt;?php /** * Write content to file * @method writeFile * @param string $fileName, $clearFlag, $data * @return file content */ function writeFile(string $fileName, $data, $clearFlag = false) &#123; $dirName = dirname($fileName); if(!file_exists($dirName)) &#123; mkdir($dirName, 0777, true); &#125; if(is_file($fileName) &amp;&amp; is_readable($fileName)) &#123; if(filesize($fileName) &gt; 0) &#123; $srcData = file_get_contents($fileName); &#125; &#125; if(is_array($data) || is_object($data)) &#123; $data = serialize($data); &#125; $data = srcData.$data; if(file_put_contents($fileName, $data) !== false) &#123; return true; &#125; else &#123; return false; &#125; &#125;?&gt; 1234567891011121314151617181920&lt;?php /** * Truncate content from file * @method truncateFile * @param string $fileName, int $length * @return file content */ function truncateFile(string $fileName, int $length) &#123; if(is_file($fileName) &amp;&amp; is_writeable($fileName)) &#123; $handle = fopen($fileName, 'rb+'); $length &lt; 0 ? 0 : $length; ftruncate($fileName, $length); fclose($fileName); return true; &#125; else &#123; return false; &#125; &#125;?&gt; File Download123456789101112131415161718192021222324252627&lt;?php /** * Download File * @method downloadFile * @param string $fileName, array $allowDownloadExtension * @return void */ function downloadFile(string $fileName, array $allowDownloadExtension = ['jpg', 'jpeg', 'gif', 'txt', 'png', 'html', 'zip', 'rar']) &#123; // test if downloadable and exisit if(!is_file($fileName) || !is_readable($fileName)) &#123; return false; &#125; $extension = strtolower(pathinfo($fileName, PATHINFO_EXTENSION))； if(!in_array($extension, $allowDownloadExtension)) &#123; return false; &#125; // header() send header info header('content-type:application/octet-stream'); // tell client that size is calculated base on bytes header('Accept-Ranges:bytes'); header('Accept-Length:'.filesize($fileName)); // tell client this is an attachment header('Content-Disposition:attachment;filename='.basename($fileName)); readfile($fileName); &#125;?&gt; 12345678910111213141516171819202122232425262728293031323334353637&lt;?php /** * Download File slice * @method downloadFile * @param string $fileName, array $allowDownloadExtension * @return void */ function downloadFile(string $fileName, array $allowDownloadExtension = ['jpg', 'jpeg', 'gif', 'txt', 'png', 'html', 'zip', 'rar']) &#123; // test if downloadable and exisit if(!is_file($fileName) || !is_readable($fileName)) &#123; return false; &#125; $extension = strtolower(pathinfo($fileName, PATHINFO_EXTENSION))； if(!in_array($extension, $allowDownloadExtension)) &#123; return false; &#125; // header() send header info header('content-type:application/octet-stream'); // tell client that size is calculated base on bytes header('Accept-Ranges:bytes'); $fileSize = filesize($fileName) header('Accept-Length:'.$fileSize); // tell client this is an attachment header('Content-Disposition:attachment;filename='.basename($fileName)); $readeBuffer = 1024; $sumBuffer = 0; $handle = fopen($fileName, 'rb'); while(!fendf($handle) &amp;&amp; $sumBuffer &lt; $fileSize) &#123; echo fread($handle, $readBuffer); $sumBuffer += $readBuffer; &#125; fclose($handle); exit; &#125;?&gt; File Upload1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465&lt;?php function uploadFile(array $fileInfo, string $uploadPath = './uploads', bool $imageFlag = true, array $allowUploadExtension = ['jpeg', 'gif', 'txt', 'png', 'html', 'zip', 'rar'], int $maxSize = 2097152) &#123; define('UPLOAD_ERRS',[ 'upload_max_filesize' =&gt; 'upload_max_filesize exceeded', 'form_max_size' =&gt; 'form_max_size exceeded', 'upload_file_partial' =&gt; 'partial file uploaded', 'no_upload_file_selected' =&gt; 'no_upload_file_selected', 'upload_system_error' =&gt; 'system error', 'file_type_not_supported' =&gt; 'file type not supported', 'exceed_max_size' =&gt; 'max size exceed', 'not_true_image' =&gt; 'not true image', 'not_http_post' =&gt; 'not post', 'move_error' =&gt; 'move_error' ]); // check if upload error if($fileInfo['error'] === UPLOAD_ERR_OK) &#123; $ext = strtolower(pathinfo($fileInfo['name'], PATH_EXTENSION)); if(!in_arry($ext, $allowUploadExtension)) &#123; return UPLOAD_ERRS['file_type_not_supported']; &#125; if($fileInfo['size'] &gt; $maxSize) &#123; return UPLOAD_ERRS['exceed_max_size']; &#125; if($imageFlag) &#123; if(@!getimagesize($fileInfo['tmp_name'])) &#123; return UPLOAD_ERRS['not_true_image']; &#125; &#125; if(!is_uploaded_file($fileInfo['tmp_name'])) &#123; return UPLOAD_ERRS['not_http_post']; &#125; if(!is_dir($uploadPath)) &#123; mkdir($uploadPath, 0777, true); &#125; $uniName = md5(uniqueid(microtime(true), true)), '.'.$ext; $dest = $uploadPath.DIRECTORY_SEPARATOR.$uniName; if(@!move_uploaded_file($fileInfo['tmp_name'], $dest)) &#123; return UPLOAD_ERRS['move_error'] ; &#125; return $dest; &#125; else &#123; switch($fileInfo['error']) &#123; case 1: $mes = UPLOAD_ERRS['upload_max_filesize']; break; case 2: $mes = UPLOAD_ERRS['form_max_size']; break; case 3: $mes = UPLOAD_ERRS['upload_file_partial']; break; case 4: $mes = UPLOAD_ERRS['no_upload_file_selected']; break; case 5: $mes = UPLOAD_ERRS['upload_system_error']; break; &#125; return $mes; &#125; &#125;?&gt; File Archive1234567891011121314151617181920// Single File&lt;?php function zip_file(string $fileName) &#123; if(!is_file($fileName)) &#123; return false; &#125; $zip = new ZipArchive(); $zipName = basename($fileName).'.zip'; if($zip-&gt;open($zipName, ZipArchive::CREATE|ZipArchive::OVERWRITE)) &#123; if($zip=&gt;addFile($fileName)) &#123; @unlink($fileName); &#125; $zip-&gt;close(); return true; &#125; else &#123; return false; &#125; &#125;?&gt; 12345678910111213141516171819202122232425// Multiple File&lt;?php function zip_files(string $zipName, ...$files) &#123; $zipExt = strtolower(pathinfo($zipName,PATH_EXTENSION)); if('zip' !== $zipExt) &#123; return false; &#125; $zip = new ZipArchive(); if($zip-&gt;open($zipName, ZipArchive::CREATE|ZipArchive::OVERWRITE)) &#123; foreach($files as $file) &#123; if(is_file($file)) &#123; if($zip=&gt;addFile($fileName)) &#123; @unlink($fileName); &#125; $zip-&gt;close(); return true; &#125; &#125; &#125; else &#123; return false; &#125; &#125;?&gt; 1234567891011121314151617181920// Multiple File&lt;?php function unzip_file(string $zipName, string $dest) &#123; if(!is_file($zipName)) &#123; return false; &#125; if(!is_dir($dest)) &#123; mkdir($dest, 0777, true); &#125; $zip = new ZipArchive(); if($zip-&gt;open($zipName)) &#123; $zip-&gt;extractTo($dest); $zip-&gt;close(); return true; &#125; else &#123; return false; &#125; &#125;?&gt;","tags":[{"name":"PHP","slug":"PHP","permalink":"http://josephjin.site/blog/tags/PHP/"}]},{"title":"PHP CSV","date":"2018-09-29T17:59:07.000Z","path":"2018/09/29/PHP CSV/","text":"PHP CSV fgetcsv() -&gt; return an array of data fputcsv() –&gt; write array into file as csv format file_get_contents() file_put_contents() serialize() unserialize() json_encode() json_decode()","tags":[{"name":"PHP","slug":"PHP","permalink":"http://josephjin.site/blog/tags/PHP/"}]},{"title":"PHP Session","date":"2018-09-26T18:33:07.000Z","path":"2018/09/26/PHP Session/","text":"Session support in PHP consists of a way to preserve certain data across subsequent accesses. This enables you to build more customized applications and increase the appeal of your web site Related Functions session_start - bool session_start ([ array $options = array() ] ) -&gt; session_start() creates a session or resumes the current one based on a session identifier passed via a GET or POST request, or passed via a cookie.","tags":[{"name":"PHP","slug":"PHP","permalink":"http://josephjin.site/blog/tags/PHP/"}]},{"title":"PHP File System","date":"2018-09-25T17:59:07.000Z","path":"2018/09/25/PHP File System/","text":"file() filetype($file_name) –&gt; return file type filesize($file_name) –&gt; return file size –&gt; bit size filectime($file_name) –&gt; create time filemtime() –&gt; modified time fileatime() –&gt; access time is_readable() – readable? is_writeable() | is_writable() –&gt; writeable? is_executable() –&gt; executable? is_file() –&gt; is a file? pathinfo() –&gt; file path basename() –&gt; return base name dirname() –&gt; return directory name file_exists() –&gt; if exist touch(file) –&gt; create file unlink(file) –&gt; delete file rename(old,new) –&gt; rename file/move file copy(src, dest) –&gt; copy file (copy url needs to set allow_url_fopen=On) Read and Write fopen() open a file with specific mode r, r+, w, w+, a+ fread() read a file fwrite() write a file ftell() –&gt; return pointer index fseek() –&gt; move pointer frewind() –&gt; move pointer index to the 0 fclose() –&gt; close file fwrite()/fputs() ftruncate() –&gt; slice file content fgetc() –&gt; get a character fgets() –&gt; get a line fgetss() –&gt; get a line and remove html tags feof() –&gt; return true if reach end of file strip_tags() –&gt; remove tags file_get_contents() –&gt; read all content from file into a string file_put_contents() –&gt; write content to a file, will overwrite previous content, if file does not exist, it will be created serialize() –&gt; serialize array serialize –&gt; unserialze content json_encode() –&gt; transform to json json_decode –&gt; transform from json","tags":[{"name":"PHP","slug":"PHP","permalink":"http://josephjin.site/blog/tags/PHP/"}]},{"title":"PHP Array Traversal","date":"2018-09-22T05:57:34.000Z","path":"2018/09/21/Array Operations/","text":"Traversal foreach array pointer each() and list() 12345678910111213141516171819202122232425262728293031323334// One Demension// foreach/* foreach($array_name as $val) &#123; // &#125; foreach($array_name as $key=&gt;$val) &#123; &#125;*/ $arr = [ '5'=&gt;'11', '55'=&gt;'a', '555'=&gt;'2' ]; foreach($arr as $item) &#123; echo $item; &#125; foreach($arr as $key=&gt;$item) &#123; echo $key,'=&gt;',$item; &#125;// 2D Array$users = [ ['age'=&gt;15, 'id'=&gt;1233], ['age'=&gt;22, 'id'=&gt;1223], ['age'=&gt;12, 'id'=&gt;1243],];foreach($users as $user) &#123; echo $user['age'];&#125; Array Pointerkey($array) =&gt; return current key name of the pointercurrent($array) =&gt; return current value of the pointernext($array) =&gt; return next value of the pointer, return false if no nextprev($array) =&gt; return previous value of the pointer, return false if no previousend($array) =&gt; last value of the pointerreset($array)","tags":[{"name":"PHP","slug":"PHP","permalink":"http://josephjin.site/blog/tags/PHP/"},{"name":"Array","slug":"Array","permalink":"http://josephjin.site/blog/tags/Array/"}]},{"title":"PHP Array","date":"2018-09-20T05:57:34.000Z","path":"2018/09/19/PHP Array/","text":"Array Create Array array(); array(2,3,4,&#39;king&#39;,true)$arr = array(key=&gt;value) The key can either be an integer or a string. The value can be of any type.If multiple elements in the array declaration use the same key, only the last one will be used as all others are overwritten. 1234567891011121314151617181920212223242526272829303132333435// simple array&lt;?php$array = array( \"foo\" =&gt; \"bar\", \"bar\" =&gt; \"foo\",);// as of PHP 5.4$array = [ \"foo\" =&gt; \"bar\", \"bar\" =&gt; \"foo\",];?&gt;// Type Casting and Overwriting example&lt;?php$array = array( 1 =&gt; \"a\", \"1\" =&gt; \"b\", 1.5 =&gt; \"c\", true =&gt; \"d\",);var_dump($array);?&gt;// Example #3 Mixed integer and string keys&lt;?php$array = array( \"foo\" =&gt; \"bar\", \"bar\" =&gt; \"foo\", 100 =&gt; -100, -100 =&gt; 100,);var_dump($array);?&gt; array() array(value,…) array(key=&gt;value,…) [] Check if a variable is array var_dum() –&gt; visually see it gettype() –&gt; visually see it is_array() Key Name String or integer Others will be converted to integer boolean –&gt; true -&gt; 1 false -&gt; 0 null -&gt; empty string ‘’ Duplicate key name -&gt; only keep the last one If no key name: from 0 (if key name is minus goes from 0) Multidimensional Array1234567891011121314$arr1 = array ( array(1,2,3,4), array(2,3,4,5));$arr2 = array( array('id'=&gt;1,'name'=&gt;2,3,4), array(1,2,3,4),);$arr3 = array( array('id'=&gt;1,'name'=&gt;2,3,4), 'next'=&gt;array(1,2,3,4),); 1234567891011$arr1[]=12;$arr1[]=13;$arr1[]=14;$arr1[]=11;// array(12,13,14,11);$arr2[3] = 45;$arr2[] = 45;$arr2['hi'] = 45;$arr2[-3] = 45;// array(3=&gt;45, 45, 'hi'=&gt;45, -3=&gt;45) range($start, $end, $increment)12range(1,10); // 1, 2, 3, 4, ... 10range('a','z'); // a,...,z compact($variable1,...)123$name = \"name\";$age = 33;$arr = compact('name','age'); using define and const declare constant array12345const arr = array(1,2,3);define(\"test\", array(1,2,3));// they both are constant array Using Array Using array by key value`php$arr == [‘a’,’b’,’c’];// $arr[key_name] ==&gt;$arr[1];$arr{1};","tags":[{"name":"PHP","slug":"PHP","permalink":"http://josephjin.site/blog/tags/PHP/"},{"name":"Array","slug":"Array","permalink":"http://josephjin.site/blog/tags/Array/"}]},{"title":"JavaScript Array Remove Duplicates","date":"2018-09-20T05:47:34.000Z","path":"2018/09/19/Array Remove Duplicates/","text":"1234567891011121314151617181920212223242526272829let aa = [ &#123; name: '1', age: 18 &#125;, &#123; name: '2', age: 12 &#125;, &#123; name: '3', age: 18 &#125;, &#123; name: '4', age: 18 &#125;]let hash = &#123;&#125;let b = aa.reduce((acc, current) =&gt; &#123; if (!hash[current.age]) &#123; console.log(acc) hash[current.age] = 1 acc.push(current) return acc &#125; return acc&#125;, [])","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://josephjin.site/blog/tags/JavaScript/"},{"name":"Algorithm","slug":"Algorithm","permalink":"http://josephjin.site/blog/tags/Algorithm/"}]},{"title":"","date":"2018-09-20T05:39:58.620Z","path":"2018/09/19/Placeholder Images/","text":"title: Placeholder Imagesdate: 2018-04-22 22:12:34 tags: [Tools]Here is a useful website I have discovered onlinehttps://picsum.photos/ You are able to their placeholder images as simple as –&gt; https://picsum.photos/200/300 where 200 is the width and 300 is the heightIf you wish to use a square image –&gt; https://picsum.photos/200 will do the trickEven more, you can add searching params “?random” to the end to get random placeholder images :)","tags":[]},{"title":"PHP Function Libraries","date":"2018-09-18T17:59:07.000Z","path":"2018/09/18/PHP Function Libraries/","text":"Internal FunctionsCommon String Functions strlen($string) –&gt; get string length strtoupper($string) –&gt; convert to uppercase strtolower($string) –&gt; convert to lowercase ucfirst($string) –&gt; first letter of the string to be uppercase ucwords($string) –&gt; first letter of every words to be uppercase str_replace(mixed $search , mixed $replace , mixed $subject [, int &amp;$count ]) 123456789101112131415/***search** The value being searched for, otherwise known as the needle. An array may be used to designate multiple needles.**replace** The replacement value that replaces found search values. An array may be used to designate multiple replacements.**subject** The string or array being searched and replaced on, otherwise known as the haystack. If subject is an array, then the search and replace is performed with every entry of subject, and the return value is an array as well.**count** If passed, this will be set to the number of replacements performed.*/ str_ireplace( mixed $search , mixed $replace , mixed $subject [, int &amp;$count ] ) 123456789101112131415/* search The value being searched for, otherwise known as the needle. An array may be used to designate multiple needles. replace The replacement value that replaces found search values. An array may be used to designate multiple replacements. subject The string or array being searched and replaced on, otherwise known as the haystack. If subject is an array, then the search and replace is performed with every entry of subject, and the return value is an array as well. count If passed, this will be set to the number of replacements performed.*/ htmlspecialchars( string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = ini_get(&quot;default_charset&quot;) [, bool $double_encode = TRUE ]]] ) –&gt; html special characters –&gt; such that: &amp; (ampersand) ———— \\&amp; “ (double quote) ———— \\&quot;, unless ENT_NOQUOTES is set ‘ (single quote) ———— \\&#039; (for ENT_HTML401) or \\&apos; (for ENT_XML1, ENT_XHTML or ENT_HTML5), but only when ENT_QUOTES is set &lt; (less than) ———— \\&lt; > (greater than) ———— \\&gt; 123456789101112/* ENT_COMPAT Will convert double-quotes and leave single-quotes alone. ENT_QUOTES Will convert both double and single quotes. ENT_NOQUOTES Will leave both double and single quotes unconverted. ENT_IGNORE Silently discard invalid code unit sequences instead of returning an empty string. Using this flag is discouraged as it » may have security implications. ENT_SUBSTITUTE Replace invalid code unit sequences with a Unicode Replacement Character U+FFFD (UTF-8) or &amp;#xFFFD; (otherwise) instead of returning an empty string. ENT_DISALLOWED Replace invalid code points for the given document type with a Unicode Replacement Character U+FFFD (UTF-8) or &amp;#xFFFD; (otherwise) instead of leaving them as is. This may be useful, for instance, to ensure the well-formedness of XML documents with embedded external content. ENT_HTML401 Handle code as HTML 4.01. ENT_XML1 Handle code as XML 1. ENT_XHTML Handle code as XHTML. ENT_HTML5 Handle code as HTML 5.*/ ltrim ( string $str [, string $character_mask ] ) –&gt; trim specific character from the left(beginning) –&gt; will trim all \\s if not specified rtrim ( string $str [, string $character_mask ] ) –&gt; trim specific character from the right(end) –&gt; will trim all \\s if not specified trim ( string $str [, string $character_mask ] ) –&gt; trim specific character from both side –&gt; will trim all \\s if not specified strrpos($string2, $string1$) –&gt; return the postion where string1 is last occurred in string2 (case sensitive)) strripos($string2, $string1$) –&gt; return the postion where string1 last occurred in string2 (not case sensitive) substr( string $string , int $start [, int $length ] ) –&gt; Returns the portion of string specified by the start and length parameters. strstr( string $haystack , mixed $needle [, bool $before_needle = FALSE ] ) –&gt; Find the first occurrence of a string –&gt; Returns part of haystack string starting from and including the first occurrence of needle to the end of haystack. 12345678&lt;?php$email = 'name@example.com';$domain = strstr($email, '@');echo $domain; // prints @example.com$user = strstr($email, '@', true); // As of PHP 5.3.0echo $user; // prints name?&gt; strrev() –&gt; Returns string, reversed. md5( string $str [, bool $raw_output = FALSE ] ) –&gt; alculates the MD5 hash of str using the » RSA Data Security, Inc. MD5 Message-Digest Algorithm, and returns that hash. str_shuffle($string) –&gt; str_shuffle() shuffles a string. One permutation of all possible is created. explode( string $delimiter , string $string [, int $limit = PHP_INT_MAX ] ) –&gt; Returns an array of strings, each of which is a substring of string formed by splitting it on boundaries formed by the string delimiter. 123456789101112131415161718192021222324252627/*delimiter The boundary string.string The input string.limit If limit is set and positive, the returned array will contain a maximum of limit elements with the last element containing the rest of string. If the limit parameter is negative, all components except the last -limit are returned. If the limit parameter is zero, then this is treated as 1.*/&lt;?php// 1$pizza = \"piece1 piece2 piece3 piece4 piece5 piece6\";$pieces = explode(\" \", $pizza);echo $pieces[0]; // piece1echo $pieces[1]; // piece2// 2$data = \"foo:*:1023:1000::/home/foo:/bin/sh\";list($user, $pass, $uid, $gid, $gecos, $home, $shell) = explode(\":\", $data);echo $user; // fooecho $pass; // *?&gt; implode( string $glue , array $pieces ) | string implode ( array $pieces ) –&gt; Join array elements with a glue string. sprintf( string $format [, mixed $args [, mixed $... ]] ) –&gt; Returns a string produced according to the formatting string format. Common Math Functions ceil( float $value ) –&gt; Returns the next highest integer value by rounding up value if necessary. -&gt; Round fractions up floor ( float $value ) –&gt; Returns the next lowest integer value (as float) by rounding down value if necessary. –&gt; floor — Round fractions down pow ( number $base , number $exp ) –&gt; Returns base raised to the power of exp. sqrt ( float $arg ) –&gt; The square root of arg or the special value NAN for negative numbers. max ( array $values ) –&gt; min value min(array $values) –&gt; max value rand() | rand ( int $min , int $max ) –&gt; random number mt_rand() | mt_rand ( int $min , int $max ) –&gt; mt_rand — Generate a random value via the Mersenne Twister Random Number Generator – random number round($float, $precision[optional] –&gt; round a float number, if second parameter is not provided, then its precision will be 0 number_format($float, [$decimal]) –&gt; seperate by comma –&gt; 1000 -&gt; 1,000 Common Date Functions date ( string $format [, int $timestamp = time() ] ) -&gt; Returns a string formatted according to the given format string using the given integer timestamp or the current time if no timestamp is given. In other words, timestamp is optional and defaults to the value of time(). date_default_timezone_set ( string $timezone_identifier ) –&gt; sets the default timezone used by all date/time functions. 1234567891011&lt;?phpdate_default_timezone_set('America/Los_Angeles');$script_tz = date_default_timezone_get();if (strcmp($script_tz, ini_get('date.timezone')))&#123; echo 'Script timezone differs from ini-set timezone.';&#125; else &#123; echo 'Script timezone and ini-set timezone match.';&#125;?&gt; date_default_timezone_get() –&gt; will return a default timezone. time() –&gt; return timestamp from 1970.1.1 strtotime ( string $time [, int $now = time() ] ) –&gt; string to time stamp 123456789&lt;?phpecho strtotime(\"now\"), \"\\n\";echo strtotime(\"10 September 2000\"), \"\\n\";echo strtotime(\"+1 day\"), \"\\n\";echo strtotime(\"+1 week\"), \"\\n\";echo strtotime(\"+1 week 2 days 4 hours 2 seconds\"), \"\\n\";echo strtotime(\"next Thursday\"), \"\\n\";echo strtotime(\"last Monday\"), \"\\n\";?&gt; microtime ([ bool $get_as_float = FALSE ] ) –&gt; returns the current Unix timestamp with microseconds. 1234567891011121314151617181920&lt;?php/*** Simple function to replicate PHP 5 behaviour*/function microtime_float()&#123; list($usec, $sec) = explode(\" \", microtime()); return ((float)$usec + (float)$sec);&#125;$time_start = microtime_float();// Sleep for a whileusleep(100);$time_end = microtime_float();$time = $time_end - $time_start;echo \"Did nothing in $time seconds\\n\";?&gt; uniqid ([ string $prefix = &quot;&quot; [, bool $more_entropy = FALSE ]] ) –&gt; Gets a prefixed unique identifier based on the current time in microseconds. 123456789101112131415161718&lt;?php/* A uniqid, like: 4b3403665fea6 */printf(\"uniqid(): %s\\r\\n\", uniqid());/* We can also prefix the uniqid, this the same as * doing:** $uniqid = $prefix . uniqid();* $uniqid = uniqid($prefix);*/printf(\"uniqid('php_'): %s\\r\\n\", uniqid('php_'));/* We can also activate the more_entropy parameter, which is * required on some systems, like Cygwin. This makes uniqid()* produce a value like: 4b340550242239.64159797*/printf(\"uniqid('', true): %s\\r\\n\", uniqid('', true));?&gt; uuid ==&gt; md5(uniqid(microtime.mt_rand())); get_date() –&gt; return array of date info User Functions","tags":[{"name":"PHP","slug":"PHP","permalink":"http://josephjin.site/blog/tags/PHP/"}]},{"title":"PHP Tower of Hanoi","date":"2018-09-18T00:15:07.000Z","path":"2018/09/17/PHP Tower of Hanoi/","text":"123456789&lt;?phpfunction hlt($n) &#123; if ($n === 1) &#123; return 1; &#125; return 2* hlt($n - 1) + 1;&#125;echo hlt(64);","tags":[{"name":"Algorithm","slug":"Algorithm","permalink":"http://josephjin.site/blog/tags/Algorithm/"},{"name":"PHP","slug":"PHP","permalink":"http://josephjin.site/blog/tags/PHP/"}]},{"title":"PHP Bubble Sort","date":"2018-09-18T00:15:07.000Z","path":"2018/09/17/PHP Bubble Sort/","text":"12345678910111213141516171819202122232425262728293031323334&lt;?php// [4, 9, 8, 6, 7, 3, 2, 1]$arr = [4, 9, 8, 6, 7, 3, 2, 1];function bullingSort($arr) &#123; $checkPoint = 0; while(true) &#123; $swapCount = check($arr, $checkPoint); $checkPoint++; if ($swapCount &lt;= 0) &#123; return $arr; &#125; &#125;&#125;function check(&amp;$arr, $checkPoint) &#123; $swapCount = 0; for ($i = count($arr) - 1; $i &gt; $checkPoint; $i--) &#123; if ($arr[$i] &lt; $arr[$i - 1]) &#123; swap($arr, $i); $swapCount++; &#125; &#125; return $swapCount;&#125;function swap(&amp;$arr, $i) &#123; $tmp = $arr[$i]; $arr[$i] = $arr[$i - 1]; $arr[$i - 1] = $tmp;&#125;print_r( bullingSort($arr) );","tags":[{"name":"Algorithm","slug":"Algorithm","permalink":"http://josephjin.site/blog/tags/Algorithm/"},{"name":"PHP","slug":"PHP","permalink":"http://josephjin.site/blog/tags/PHP/"}]},{"title":"PHP Operators & Expressions","date":"2018-09-17T18:33:07.000Z","path":"2018/09/17/PHP Operators & Expressions/","text":"Operators Arithmatic Operators + - * / %, PHP7 –&gt; ** (power of) increment/decrement ++$var –$var $var– $var++ Types float –&gt; yes int –&gt; yes bool –&gt; not support this operator null –&gt; only support increment string –&gt; only support increment –&gt; last character get ASCII code ord($str) get Character based on ASCII code chr(98) String Operators Concatenation Operator –&gt; . $str1.$str2.$str3 Assignment Operators Example:1234$a = 3; $a += 5; // sets $a to 8, as if we had said: $a = $a + 5;$b = \"Hello \";$b .= \"There!\"; // sets $b to \"Hello There!\", just like $b = $b . \"There!\"; Compare Operators Return boolean value Example:1234567891011$a == $b // Equal TRUE if $a is equal to $b after type juggling.$a === $b // Identical TRUE if $a is equal to $b, and they are of the same type.$a != $b // Not equal TRUE if $a is not equal to $b after type juggling.$a &lt;&gt; $b // Not equal TRUE if $a is not equal to $b after type juggling.$a !== $b // Not identical TRUE if $a is not equal to $b, or they are not of the same type.$a &lt; $b // Less than TRUE if $a is strictly less than $b.$a &gt; $b // Greater than TRUE if $a is strictly greater than $b.$a &lt;= $b // Less than or equal to TRUE if $a is less than or equal to $b.$a &gt;= $b // Greater than or equal to TRUE if $a is greater than or equal to $b.$a &lt;=&gt; $b // Spaceship An integer less than, equal to, or greater than zero when $a is respectively less than, equal to, or greater than $b. Available as of PHP 7.$a ?? $b ?? $c // null detection, if not null, return not null value --&gt; PHP 7 Logic Operators Examples:123456$a and $b // And TRUE if both $a and $b are TRUE.$a or $b // Or TRUE if either $a or $b is TRUE.$a xor $b // Xor TRUE if either $a or $b is TRUE, but not both.! $a // Not TRUE if $a is not TRUE.$a &amp;&amp; $b // And TRUE if both $a and $b are TRUE.$a || $b // Or TRUE if either $a or $b is TRUE. Error Control Operators @ Add this @ before any expression that will lead to an error –&gt; error message will not show up Ternary Operator condition ? satisfied : not satisfied Operator Precedence12345678910111213141516171819202122non-associative //clone new clone and newleft //[ array()right //** arithmeticright //++ -- ~ (int) (float) (string) (array) (object) (bool) @ types and increment/decrementnon-associative //instanceof typesright //! logicalleft //* / % arithmeticleft //+ - . arithmetic and stringleft //&lt;&lt; &gt;&gt; bitwisenon-associative //&lt; &lt;= &gt; &gt;= comparisonnon-associative //== != === !== &lt;&gt; &lt;=&gt; comparisonleft //&amp; bitwise and referencesleft //^ bitwiseleft //| bitwiseleft //&amp;&amp; logicalleft //|| logicalright //?? comparisonleft //? : ternaryright //= += -= *= **= /= .= %= &amp;= |= ^= &lt;&lt;= &gt;&gt;= assignmentleft //and logicalleft //xor logicalleft //or logical","tags":[{"name":"PHP","slug":"PHP","permalink":"http://josephjin.site/blog/tags/PHP/"}]},{"title":"PHP Predefined Variable","date":"2018-09-17T18:15:07.000Z","path":"2018/09/17/PHP Predefined Variable/","text":"What is a predefined variable? Global variable Provided by PHP Category $GLOBALS Including all below: $_SERVERS Server info $_ENV Environment info $_COOKIE Cookie info $_SESSION Session info $_FILE Upload file info $_GET HTTP GET info Get data from get/search params/ ?format=234: $_GET[param_name] $_POST HTTP POST info Get data from post: $_POST[input_name] $_REQUEST including post, get, cookie $_REQUEST[name]","tags":[{"name":"PHP","slug":"PHP","permalink":"http://josephjin.site/blog/tags/PHP/"}]},{"title":"PHP Functions","date":"2018-09-17T18:15:07.000Z","path":"2018/09/17/PHP functions/","text":"FunctionsDeclare function12345function echoDragon() &#123; // code&#125;// call functionechoDragon(); Naming Convention Alphabet, underscore, number Number cannot be first letterc Parameters12345function sum($a, $b) &#123; echo $a + $b&#125;// call functionsum(1,2); Return Value12345function sum($a, $b) &#123; return $a + $b&#125;// call functionecho sum(1,2); Variable scope12345678910&lt;?php$a = 1; /* global scope */function test()&#123; echo $a; /* reference to local scope variable */&#125;test();?&gt; global keyword 1234567891011121314&lt;?php$a = 1;$b = 2;function Sum()&#123; global $a, $b; $b = $a + $b;&#125;Sum();echo $b;?&gt; $GLOBALS 123456789101112&lt;?php$a = 1;$b = 2;function Sum()&#123; $GLOBALS['b'] = $GLOBALS['a'] + $GLOBALS['b'];&#125;Sum();echo $b;?&gt; static local variable –&gt; if defined, use previous value 12345678function local() &#123; static $var = 1; $var++; echo $var;&#125;local(); // echo 2local(); // echo 3echo $var; // error message dynamic local variable 12345678function local() &#123; $var = 1; $var++; echo $var;&#125;local(); // echo 2local(); // echo 2echo $var; // error message Passing by Reference &amp; Passing by Value1234567891011121314151617181920212223// by Reference&lt;?php$a = 3;function change(&amp;$c) &#123; $c = 33;&#125;change($a);echo $a; // 33?&gt;---&lt;?php// by Value$a = 3;function change(&amp;$c) &#123; $c = 33;&#125;change($a);echo $a; // 33?&gt; Note: if passing an object/array, it is actually passing address instead of value by default! Default Parameter Value123456&lt;?phpfunction echoValue($b, $a = 3) &#123; echo $a;&#125;echoValue(2); // echo 3, a will take default value 3?&gt; Argument Functions func_num_args –&gt; return amount of total paramenter func_get_args –&gt; return all parameters as an array Argument Type123456789// 3 type checks -&gt; Array, Object, Callbackfunction needArray(array arr) &#123; return arr;&#125;needArr('ss'); // error --&gt; type error// callback will be passed by a stringneedArr('callback_function_name'); Variable Function12345678910111213141516function test() &#123; return 1;&#125;$func = 'test';// always do thisif(is_callable($func))&#123; // check if this variable function is callable to prevent error $func(); // equal to test();&#125;// orif (funtion_exists($func)) &#123; // check if this variable function exists to prevent error $func(); // equal to test();&#125; Inner Function123456789// Inner function has global scopefunction foo() &#123; function bar() &#123; echo 'hello world!' &#125;&#125;foo(); // 'hello world!'bar(); // 'hello world!' Variable Scope of Inner Function1234567891011// Inner function has global scopefunction foo() &#123; $a = 3; function bar() &#123; echo 'hello world!' echo $a; // error --&gt; $a is not defined in this scope &#125;&#125;foo(); // 'hello world!'bar(); // 'hello world!' Recursion12345678910111213141516171819// example 1function sum($n, $m) &#123; if ($m &lt;= $n) &#123; return $n; &#125; return sum($n, $m - 1) + $m&#125;echo sum(1, 100) // 5050// example 2function fbnq($n) &#123; if ($n &lt;= 2) &#123; return 1; &#125; else &#123; return fbnq($n-1) + fbnq($n-2); &#125;&#125;echo fbnq(6) // 8 Anonymous Function12345$say = function($str) &#123; echo $str;&#125;; // this is treated as an statement --&gt; need semicolon$say('hello'); Inner Function Access Parent Function Variable123456789function test() &#123; $a = 4; $say = function($str) use (&amp;$a) &#123; // add &amp; to pass address or simply pass value echo $str; echo $message; &#125;; // this is treated as an statement --&gt; need semicolon&#125;$say('hello'); // str and a","tags":[{"name":"PHP","slug":"PHP","permalink":"http://josephjin.site/blog/tags/PHP/"}]},{"title":"PHP Const","date":"2018-09-16T18:25:52.000Z","path":"2018/09/16/PHP const/","text":"Const Use Uppercase System Constant PHP_VERSION PHP_OS PHP_INT_MAX Customize (const is Global, can be scalar or array, define only once) define() –&gt; define($name, $value) const key word const NAME = &#39;NAME&#39;; const HELLO = &#39;HELLO WORLD!&#39;; Get const value const($const_name); Check if const aleady exist defined($const_name); –&gt; return T/F Get all defined consts –&gt; get_define_constants() –&gt; return an array contains all defined constants Magic constants __LINE__ –&gt; line number __FILE__ –&gt; full directory and file name __DIR__ –&gt; full directory __FUNCTION__ –&gt; function name __CLASS__ –&gt; class name __TRAIT__ –&gt; trait name __METHOD__ –&gt; current function name inside current class __NAMESPACE__ –&gt; namespace name","tags":[{"name":"PHP","slug":"PHP","permalink":"http://josephjin.site/blog/tags/PHP/"}]},{"title":"PHP Datatype conversion","date":"2018-09-14T22:19:58.000Z","path":"2018/09/14/PHP Datatype conversion/","text":"数据转换 Datatype conversion 自动转换（隐式转换）Auto 强制转换（显式转换）Setting 其他类型转换成数值型1234561 + true = 2 // true = 11 + false = 1 // false = 01 + null = 1 // null = 01 + 'string' = 1 // string = 01 + '21dasdas' = 221 + '2e2asda' = 201 falsy： int,float 0 null empty array “” ‘’ string 0","tags":[{"name":"PHP","slug":"PHP","permalink":"http://josephjin.site/blog/tags/PHP/"}]},{"title":"PHP Data Type Conversion","date":"2018-09-14T18:22:07.000Z","path":"2018/09/14/PHP datatype/","text":"Temperary Integer: (int|integer)$var; Float: (float|double|real)$var; String: (string)$var; Boolean: (bool|boolean)$var; Null: (unset)$var; Array: (array)$var; Object: (object)$var; Integer: intval($var); Float: floatval($var);, doubleval($var); String: strval($var); Boolean: boolvar($var); Permanentsertype($var, &#39;type&#39;) – set data typegettype($var) – get data type` Types: 1. boolean/bool 2. integer/int 3. string 4. float 5. array 6. object 7. null Verify Data Type1234567891011121314151617// -- is_*is_int()is_integer()is_long()is_float()is_double()is_real()is_string()is_bool()is_scalar()is_null()is_array()is_object()is_resource()is_numeric()...// return true | false","tags":[{"name":"PHP","slug":"PHP","permalink":"http://josephjin.site/blog/tags/PHP/"}]},{"title":"PHP Control Structures","date":"2018-09-14T18:15:07.000Z","path":"2018/09/14/PHP Control Structures/","text":"Control Structures if else else if/ elseif 1234567891011&lt;?phpif($condition) &#123; // do this&#125;else if&#123; // do that&#125;else &#123; // do this&#125;?&gt; switch 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061&lt;?phpswitch ($condition) case 'value1': // code 1 break; case 'value2': // code 2 break; case 'value3': // code 3 break; default: // code default break;endswitch;?&gt;---&lt;?phpswitch ($condition) &#123; case 'value1': // code 1 break; case 'value2': // code 2 break; case 'value3': // code 3 break; default: // code default break;&#125;?&gt;---&lt;?phpswitch ($condition) &#123; case 'value1': &#123; // code 1 break; &#125; case 'value2': &#123; // code 2 break; &#125; case 'value3': &#123; // code 3 break; &#125; default: &#123; // code default break; &#125;&#125;?&gt; while 123456789101112131415161718&lt;?php/* example 1 */$i = 1;while ($i &lt;= 10) &#123; echo $i++; /* the printed value would be $i before the increment (post-increment) */&#125;/* example 2 */$i = 1;while ($i &lt;= 10): echo $i; $i++;endwhile;?&gt; do - while 123456&lt;?php$i = 0;do &#123; echo $i;&#125; while ($i &gt; 0);?&gt; for 12345678910111213141516171819202122232425262728293031323334353637&lt;?php for (exp1, exp2, exp3) &#123; // code &#125;?&gt;&lt;?php/* example 1 */for ($i = 1; $i &lt;= 10; $i++) &#123; echo $i;&#125;/* example 2 */for ($i = 1; ; $i++) &#123; if ($i &gt; 10) &#123; break; &#125; echo $i;&#125;/* example 3 */$i = 1;for (; ; ) &#123; if ($i &gt; 10) &#123; break; &#125; echo $i; $i++;&#125;/* example 4 */for ($i = 1, $j = 0; $i &lt;= 10; $j += $i, print $i, $i++);?&gt; break, continue continue is used within looping structures to skip the rest of the current loop iteration and continue execution at the condition evaluation and then the beginning of the next iteration. 12345678910111213141516171819202122&lt;?phpforeach ($arr as $key =&gt; $value) &#123; if (!($key % 2)) &#123; // skip even members continue; &#125; do_something_odd($value);&#125;$i = 0;while ($i++ &lt; 5) &#123; echo \"Outer&lt;br /&gt;\\n\"; while (1) &#123; echo \"Middle&lt;br /&gt;\\n\"; while (1) &#123; echo \"Inner&lt;br /&gt;\\n\"; continue 3; &#125; echo \"This never gets output.&lt;br /&gt;\\n\"; &#125; echo \"Neither does this.&lt;br /&gt;\\n\";&#125;?&gt; break ends execution of the current for, foreach, while, do-while or switch structure. 12345678910111213141516171819202122232425&lt;?php$arr = array('one', 'two', 'three', 'four', 'stop', 'five');foreach ($arr as $val) &#123; if ($val == 'stop') &#123; break; /* You could also write 'break 1;' here. */ &#125; echo \"$val&lt;br /&gt;\\n\";&#125;/* Using the optional argument. */$i = 0;while (++$i) &#123; switch ($i) &#123; case 5: echo \"At 5&lt;br /&gt;\\n\"; break 1; /* Exit only the switch. */ case 10: echo \"At 10; quitting&lt;br /&gt;\\n\"; break 2; /* Exit the switch and the while. */ default: break; &#125;&#125;?&gt; goto The goto operator can be used to jump to another section in the program. Cannot jump into for loop, while loop, switch statement, class, function1234567&lt;?phpgoto a;echo 'Foo';a: // The target point is specified by a label followed by a colon, and the instruction is given as goto followed by the desired target label. This is not a full unrestricted goto. echo 'Bar';?&gt;","tags":[{"name":"PHP","slug":"PHP","permalink":"http://josephjin.site/blog/tags/PHP/"}]},{"title":"PHP Common Functions","date":"2018-09-14T18:15:07.000Z","path":"2018/09/14/PHP Common Functions/","text":"Random number12345&lt;?phpint rand(void)int rand ( int $min , int $max )// Generate a random integer?&gt; Date123&lt;?phpstring date ( string $format [, int $timestamp = time() ] )?&gt; Format: Y: 4 digits year m: 2 digits month d: 2 digits date H: 2 digits hour i: 2 digits minute s: 2 digits second w: 0~6, day of the week, 0 represents Sunday Timetime() –&gt; Return current Unix timestamp print_r() –&gt; Prints human-readable information about a variableprint_r ( mixed $expression [, bool $return = FALSE ] ) –&gt; If you would like to capture the output of print_r(), use the return parameter. When this parameter is set to TRUE, print_r() will return the information rather than print it. die(&#39;messge) exit(&#39;message&#39;) –&gt; terminate progrom strlen() –&gt; return string length","tags":[{"name":"PHP","slug":"PHP","permalink":"http://josephjin.site/blog/tags/PHP/"}]},{"title":"PHP Day 1","date":"2018-09-14T18:15:07.000Z","path":"2018/09/14/PHP day1/","text":"PHP Day 1Why PHP? Easy Suitable for WEB development WordPress Large user group Compatablility - Server - Database What for? Interactive websites How to study PHP? 3W1H1P What is it? Why would I learn it? When can I use it? How to use it? Practice it. Learn to code Practice more Think more Ask more PHP Development Environment LAMP - Linux + Apache + MySQL + PHP LNMP - Linux + Nginx + MySQL + PHP LNMPA - Linux + Nginx + MySQL + PHP + Apache WAMP - Window + Apache + MySQL + PHP PHP Syntax Extension: .php, cannot use special characters PHP style: standard: &lt;?php code; ?&gt; Short Open tag: &lt;? code; ?&gt; ASP: &lt;% code; %&gt; If only PHP code inside a file, ?&gt; should be omitted ; after each line of code comments single line: 1. // code 2. # code multiple lines: /* code */ Variable Decalare a variable: $variable_name;, $number = 1; Start with alphabet or _, no special characters Camel case: helloWord Underscore: hello_world Case sensitive Variable variables: &lt;?php $a = &#39;hello&#39;; $$a = &#39;world&#39;; echo $$a . &#39;&lt;br /&gt;&#39;; echo &quot;$a ${$a} &lt;br /&gt; Variable types: Int decimal hex oct binary signed unsigned-Float scientific .number has error –&gt; don’t compare 2 float values Boolean true false String single quote –&gt; what you entered is what you will get except \\’, \\ &quot;$var this variable will not be showing up&quot; double quote &quot;$var this variable will be showing up&quot; heredoc $str = &lt;&lt;&lt;EOF string_paragraph EOF; –&gt; “” nowdoc $str = &lt;&lt;&lt;EOF string_paragraph EOF; –&gt; ‘’ Array Object Resource null – undefined variable or assigned to be null or unset() –&gt; discard variable value var_dump($var); –&gt; info about this variable header –&gt; header() \\n –&gt; new line, \\r –&gt; enter, \\t –&gt; tab, \\\\ –&gt; \\, \\&#39; –&gt; ‘, \\&quot; –&gt; “ {} –&gt; $string = &#39;abc&#39;;","tags":[{"name":"PHP","slug":"PHP","permalink":"http://josephjin.site/blog/tags/PHP/"}]},{"title":"Binary Search","date":"2018-09-13T22:17:34.000Z","path":"2018/09/13/Binary-Search/","text":"Binary SearchBinary Search 的前提条件是 1. 有序 2. 数组满足以后，即可取中间值判断与目标值是否相等， 如不相等，再取中间值对比，此时中间值为 prev中间值和最低值、最高值 中间的值 mid = (mid + high)/2mid = (low + mid)/2 Time: O(logN) 1234567891011121314function binarySearch(target,arr,start,end) &#123; var start = start || 0; var end = end || arr.length-1; var mid = parseInt(start+(end-start)/2); if(target==arr[mid])&#123; return mid; &#125;else if(target&gt;arr[mid])&#123; return binarySearch(target,arr,mid+1,end); &#125;else&#123; return binarySearch(target,arr,start,mid-1); &#125; return -1;&#125; 12345678910111213141516function binarySearch(target,arr) &#123; var start = 0; var end = arr.length-1; while (start&lt;=end)&#123; var mid = parseInt(start+(end-start)/2); if(target==arr[mid])&#123; return mid; &#125;else if(target&gt;arr[mid])&#123; start = mid+1; &#125;else&#123; end = mid-1; &#125; &#125; return -1;&#125;","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://josephjin.site/blog/tags/JavaScript/"},{"name":"Algorithm","slug":"Algorithm","permalink":"http://josephjin.site/blog/tags/Algorithm/"}]},{"title":"Mouse Event","date":"2018-09-01T22:44:34.000Z","path":"2018/09/01/mouse events/","text":"MouseEvent click: mouse click dbclick: mouse double click on an element mousedown: button is pressed on an element mouseup: triggers when button released mousemove: mouse move on an element mouseenter: mouse enters an element area mouseover: over an element mouseout: out an element mouseleave: leaveds an element contextmenu: right button click wheel: scroll button click –&gt; mousedown -&gt; mouseup -&gt; click this is the sequencedblclick –&gt; mousedown -&gt; mouseup -&gt; click -&gt; dbclick mouseover and mouseenter difference: mouseenter trigers once while mouseover trigers multiple times","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://josephjin.site/blog/tags/JavaScript/"},{"name":"DOM","slug":"DOM","permalink":"http://josephjin.site/blog/tags/DOM/"},{"name":"Event","slug":"Event","permalink":"http://josephjin.site/blog/tags/Event/"}]},{"title":"Scope in Vue","date":"2018-08-12T17:11:54.000Z","path":"2018/08/12/scoped in Vue/","text":"If you want to use scoped in .vue file and you import a third party component such as ElementUI and you wanna modify the style of itThis is what you need to do:123456&lt;style lang=\"less\" scoped&gt;.banner /deep/ .el-button &#123; ...&#125;&lt;/style&gt; use /deep/ to penetrate the scoped, you may see someone using &gt;&gt;&gt; to achieve the same goal.However, if you are using less, you are not able to use this directly. You will need to use it this way ~&quot;&gt;&gt;&gt;&quot;, which is not what I like to do","tags":[{"name":"CSS","slug":"CSS","permalink":"http://josephjin.site/blog/tags/CSS/"},{"name":"Vue","slug":"Vue","permalink":"http://josephjin.site/blog/tags/Vue/"},{"name":"Less","slug":"Less","permalink":"http://josephjin.site/blog/tags/Less/"}]},{"title":"Regular Expression","date":"2018-08-12T04:33:21.000Z","path":"2018/08/11/Regular Expression/","text":"Regex Regular expressions are used in programming languages to match parts of strings. One way to test a regex is using the .test() method.The test() method executes a search for a match between a regular expression and a specified string. Returns true or false.123456789101112131415var regex1 = RegExp('foo*');var regex2 = RegExp('foo*','g');var str1 = 'table football';console.log(regex1.test(str1));// expected output: trueconsole.log(regex1.test(str1));// expected output: trueconsole.log(regex2.test(str1));// expected output: trueconsole.log(regex2.test(str1));// expected output: false It is Case sensitive –&gt; /big/ is not equavalent to /Big/ or /BIG/ You can search for multiple patterns using the alternation or OR operator: |. Ignore Case: use i flag to make it not case sensitive /big/i for big, Big, BIG Extract Matches: .match() method –&gt; match exact REGEX and extract paragraph 12345var regex = /[A-Z]/g;var found = paragraph.match(regex);console.log(found);// expected output: Array [&quot;T&quot;, &quot;I&quot;] To search or extract a pattern more than once, you can use the g flag. The wildcard character . will match any one character. The wildcard is also called dot and period /re./ –&gt; reg, ref, reh … Match Single Character with Multiple Possibilities –&gt; For example, you want to match “bag”, “big”, and “bug” but not “bog”. You can create the regex /b[aiu]g/ to do this. The [aiu] is the character class that will only match the characters “a”, “i”, or “u”. [a-z] – [0-9] – [A-Z] these are character classes To create a negated character set, you place a caret character (^) after the opening bracket and before the characters you do not want to match. –&gt; [^0-9] Use the + character to finding repeating –&gt; /[0-9]+/, /a+/ + means 1 or more * means 0 or more","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://josephjin.site/blog/tags/JavaScript/"}]},{"title":"CSS white-space","date":"2018-06-03T22:00:34.000Z","path":"2018/06/03/CSS_ white-space/","text":"white-space/ Keyword values /white-space: normal;white-space: nowrap;white-space: pre;white-space: pre-wrap;white-space: pre-line; / Global values /white-space: inherit;white-space: initial;white-space: unset; normalSequences of whitespace are collapsed. Newline characters in the source are handled the same as other whitespace. Lines are broken as necessary to fill line boxes. nowrapCollapses whitespace as for normal, but suppresses line breaks (text wrapping) within the source. preSequences of whitespace are preserved. Lines are only broken at newline characters in the source and at elements. pre-wrapSequences of whitespace are preserved. Lines are broken at newline characters, at , and as necessary to fill line boxes. pre-lineSequences of whitespace are collapsed. Lines are broken at newline characters, at , and as necessary to fill line boxes. There are some cases that you will need to use nowrap: Navigation menu itemsIf the screen size is getting smaller and the width for each navigation link text is not enough to show all word in a single line When you want to have “…”For example: 123 overflow: hidden;white-space: nowrap;text-overflow: ellipsis; Reference: https://developer.mozilla.org/en-US/docs/Web/CSS/white-space","tags":[{"name":"CSS","slug":"CSS","permalink":"http://josephjin.site/blog/tags/CSS/"}]},{"title":"Extract Text Webpack Plugin","date":"2018-05-23T18:12:01.000Z","path":"2018/05/23/Extract Text Webpack Plugin/","text":"Use this plugin to extract CSS file from compiled js file. (Production)Or use style-loader for Dev environment 1234567891011const env = process.env.NODE_ENV || 'development'...&#123; test: /\\.(scss|css)$/, use: env === 'production' ? extractSASS.extract(&#123; fallback: 'style-loader', use: ['css-loader','sass-loader'] &#125;) : [ 'style-loader', 'css-loader', 'sass-loader' ]&#125;","tags":[{"name":"Tools","slug":"Tools","permalink":"http://josephjin.site/blog/tags/Tools/"}]},{"title":"Object Methods","date":"2018-05-13T22:17:34.000Z","path":"2018/05/13/Object method/","text":"12345678910111213// OBJvar A = &#123; print: function () &#123; console.log('hello'); &#125;&#125;;// OBJvar B = Object.create(A);Object.getPrototypeOf(B) === A // trueB.print() // helloB.print === A.print // true","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://josephjin.site/blog/tags/JavaScript/"}]},{"title":"Array Methods","date":"2018-04-20T02:18:34.000Z","path":"2018/04/19/JavaScript Array Methods_ Mutating vs. Non-Mutating/","text":"I. Add: Mutating array.push() adds an item to the end of the array array.unshift() adds an item to the beginning of the array. II. Add: Non-Mutating array.concat() spread operator III. Remove: Mutating array.pop() removes an item at the end of the array array.shift() removes an item at the beginning of the array. array.splice() for removing items from an array. IV. Remove: Non-Mutating array.filter() method creates a new array from an original array, but the new array only contains items that match the specified criteria array.slice() V. Replace: Mutating array.splice() VI. Replace: Non-Mutating array.map()","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://josephjin.site/blog/tags/JavaScript/"}]},{"title":"Live Server","date":"2018-03-11T22:11:24.000Z","path":"2018/03/11/Live Server/","text":"Live ServerA Live Server Launches a development local Server with live reload feature for static &amp; dynamic pages.It allows Hot Reloading and you will not need to ctrl + S –&gt; ctrl + tab then F5 About: https://www.npmjs.com/package/live-server How to Install &amp; Use Use npm: npm install -g live-server Use yarn: yarn global add live-server cmd: “live-server [folder name]” VS Code: Extension –&gt; search for “Live Server” –&gt; You will see it on top of everything else.Use it in VS Code is easy –&gt; Ctrl + L then Ctrl + O –&gt; boom!","tags":[{"name":"Tools","slug":"Tools","permalink":"http://josephjin.site/blog/tags/Tools/"}]},{"title":"Copy Array","date":"2018-02-11T23:17:34.000Z","path":"2018/02/11/Copy Array/","text":"var copyArr = arr.slice(0) var copyArr = [].concat(arr) var copyArr = arr.map(e =&gt; e)","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://josephjin.site/blog/tags/JavaScript/"}]},{"title":"Colorful Console","date":"2018-01-13T23:17:34.000Z","path":"2018/01/13/Colorful Console/","text":"Colorful ConsoleSimple! –&gt;console.log(&quot;%c + text you wanna enter&quot;,&quot;style you wanna apply&quot;) Reference: https://coderwall.com/p/fskzdw/colorful-console-log","tags":[{"name":"Tools","slug":"Tools","permalink":"http://josephjin.site/blog/tags/Tools/"}]}]